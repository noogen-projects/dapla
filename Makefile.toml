[config]
default_to_workspace = false
additional_profiles = ["debug"]
skip_core_tasks = true


[tasks.choose_profile.env]
MODE = "release"
ADDITIONAL = "--release"

    [tasks.choose_profile.env.debug]
    MODE = "debug"
    ADDITIONAL = "--color=auto" # it's a stub

[tasks.parse_params]
script_runner = "@duckscript"
script = '''
if not is_empty ${1}
    set_env APP ${1}
end
'''

[tasks.wasm_build_prepare]
dependencies = ["choose_profile", "parse_params"]

    [tasks.wasm_build_prepare.env]
    RUSTFLAGS = "-Copt-level=s"

        [tasks.wasm_build_prepare.env.debug]
        RUSTFLAGS = ""


[tasks.create_lapp_dir]
script_runner = "@duckscript"
script = "mkdir lapps/${APP}"
dependencies = ["parse_params"]

[tasks.copy_static]
script_runner = "@duckscript"
script = '''
rm -r lapps/${APP}/static
if not eq ${APP} "laplace"
    cp examples/${APP}/static lapps/${APP}/
end
'''
dependencies = ["create_lapp_dir"]

[tasks.copy_config]
script_runner = "@duckscript"
script = '''
rm lapps/${APP}/config.toml
cp examples/${APP}/config.toml lapps/${APP}/config.toml
'''
dependencies = ["create_lapp_dir"]


[tasks.build_client]
command = "cargo"
toolchain = "stable"
args = ["build", "-p", "${APP}_client", "--target", "wasm32-unknown-unknown", "${ADDITIONAL}"]
dependencies = ["wasm_build_prepare"]

[tasks.build_server]
command = "cargo"
toolchain = "stable"
args = ["build", "-p", "${APP}_server", "--target", "wasm32-unknown-unknown", "${ADDITIONAL}"]
dependencies = ["wasm_build_prepare"]

[tasks.build_server_wasi]
env = { RUSTFLAGS = "${RUSTFLAGS} -C lto=no -Z wasi-exec-model=reactor" }
toolchain = "nightly"
command = "cargo"
args = ["build", "-p", "${APP}_server", "--target", "wasm32-wasip1", "${ADDITIONAL}"]
dependencies = ["wasm_build_prepare"]


[tasks.deploy_client]
command = "wasm-bindgen"
args = [
    "--target",
    "web",
    "--no-typescript",
    "--out-dir",
    "lapps/${APP}/static",
    "--out-name",
    "${APP}_client",
    "target/wasm32-unknown-unknown/${MODE}/${APP}_client.wasm",
]
dependencies = ["choose_profile", "copy_static"]

[tasks.deploy_server]
script_runner = "@duckscript"
script = '''
rm lapps/${APP}/${APP}_server.wasm
cp target/wasm32-unknown-unknown/${MODE}/${APP}_server.wasm lapps/${APP}/${APP}_server.wasm
'''
dependencies = ["choose_profile", "copy_config"]

[tasks.deploy_server_wasi]
script_runner = "@duckscript"
script = '''
rm lapps/${APP}/${APP}_server.wasm
cp target/wasm32-wasip1/${MODE}/${APP}_server.wasm lapps/${APP}/${APP}_server.wasm
'''
dependencies = ["choose_profile", "copy_config"]


[tasks.client]
dependencies = ["build_client", "deploy_client"]

[tasks.server]
dependencies = ["build_server", "deploy_server"]

[tasks.wasi]
dependencies = ["build_server_wasi", "deploy_server_wasi"]


[tasks.chat]
env = { "APP" = "chat" }
run_task = [{ name = ["client", "server"] }]

[tasks.echo]
env = { "APP" = "echo" }
run_task = [{ name = ["client", "server"] }]

[tasks.notes]
env = { "APP" = "notes" }
run_task = [{ name = ["client", "wasi"] }]

[tasks.todo]
env = { "APP" = "todo" }
run_task = [{ name = ["client", "server"] }]

[tasks.examples]
dependencies = ["chat", "echo", "notes", "todo"]


[tasks.laplace_server]
command = "cargo"
toolchain = "stable"
args = ["build", "-p", "laplace_server", "${ADDITIONAL}"]
dependencies = ["choose_profile"]

[tasks.laplace_client]
env = { APP = "laplace" }
run_task = "client"

[tasks.laplace]
dependencies = ["laplace_server", "laplace_client"]

[tasks.run_laplace]
command = "cargo"
toolchain = "stable"
args = ["run", "-p", "laplace_server", "${ADDITIONAL}"]
dependencies = ["choose_profile"]


[tasks.mobile_assets]
script_runner = "@duckscript"
script = '''
rm -r target/mobile/assets
mkdir target/mobile/assets
cp lapps target/mobile/assets
cp static target/mobile/assets
'''
dependencies = ["choose_profile", "laplace_client"]

[tasks.mobile_check]
command = "cargo"
toolchain = "stable"
args = ["apk", "check", "--manifest-path", "laplace_mobile/Cargo.toml", "--target-dir", "target/mobile"]

[tasks.mobile]
command = "cargo"
toolchain = "stable"
args = [
    "apk",
    "build",
    "--manifest-path",
    "laplace_mobile/Cargo.toml",
    "--target-dir",
    "target/mobile",
    "--lib",
    "${ADDITIONAL}",
]
dependencies = ["choose_profile", "mobile_assets"]


[tasks.run]
env = { RUSTFLAGS = "", RUST_LOG = "debug,hyper=info,rustls=info,libp2p_gossipsub=info,regalloc=warn,wasmtime=info,wasmtime_wasi=warn,wasmtime_jit=info,wasmtime_cranelift=info,cranelift_codegen=info,h2=info,netlink_proto=info" }
run_task = "run_laplace"
dependencies = ["laplace", "examples"]


[tasks.all]
dependencies = ["laplace", "examples", "mobile"]


[tasks.check]
command = "cargo"
toolchain = "stable"
args = ["check", "--workspace", "--all-features", "--all-targets"]

[tasks.checkfmt]
command = "cargo"
toolchain = "nightly"
args = ["fmt", "--", "--check"]

[tasks.fmt]
command = "cargo"
toolchain = "nightly"
args = ["fmt"]

[tasks.clippy]
command = "cargo"
toolchain = "stable"
args = ["clippy", "--all-targets", "--all-features"]

#######
# Tests
#######

[tasks.laplace_client_test]
command = "cargo"
toolchain = "stable"
args = ["test", "-p", "laplace_client", "--all-features", "--all-targets"]

[tasks.laplace_common_test]
command = "cargo"
toolchain = "stable"
args = ["test", "-p", "laplace_common", "--all-features", "--all-targets"]

[tasks.laplace_server_test]
command = "cargo"
toolchain = "stable"
args = ["test", "-p", "laplace_server", "--all-features", "--all-targets"]

[tasks.laplace_wasm_test]
command = "cargo"
toolchain = "stable"
args = ["test", "-p", "laplace_wasm", "--all-features", "--all-targets"]

[tasks.laplace_wasm_macro_test]
command = "cargo"
toolchain = "stable"
args = ["test", "-p", "laplace_wasm_macro", "--all-features", "--all-targets"]

[tasks.laplace_yew_test]
command = "cargo"
toolchain = "stable"
args = ["test", "-p", "laplace_yew", "--all-features", "--all-targets"]

[tasks.integration_test]
command = "cargo"
toolchain = "stable"
args = ["test", "-p", "tests", "--all-features", "${ADDITIONAL}"]
dependencies = ["laplace_server"]

[tasks.test]
dependencies = [
    "laplace_client_test",
    "laplace_common_test",
    "laplace_server_test",
    "laplace_wasm_test",
    "laplace_wasm_macro_test",
    "laplace_yew_test",
    "integration_test",
]
